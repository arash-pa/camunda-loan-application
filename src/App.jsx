import React, { useState, useEffect } from "react";
//import "./index.css";
import "./app.css";
import {
  proofOfAddressInstructions,
  proofOfIncomeInstructions,
} from "../data/data";
import TextInput from "./components/TextInput";
import AddressInput from "./components/AddressInput";
import PhoneInputComponent from "./components/PhoneInputComponent";
import EmailInput from "./components/EmailInput";
import DropdownInput from "./components/DropdownInput";
import DateInput from "./components/DateInput";
import CurrencyInput from "./components/CurrencyInput";
import {
  employmentTypeLookup,
  housingStatusLookup,
  loanTypeLookup,
} from "../data/lookupHardcode";
import FileUpload from "./components/FileUpload";
// import callAppianWebAPI from '../data/lookups';
//import DateInput from './components/DateInput';
// ... other imports

import getAdobeToken from "../data/getAdobeToken";
import getAdobePresignedUploadURL from "../data/getAdobePresignedUploadURL";
import { uploadFile } from "../data/putUploadFile";
import { getFile } from "../data/postGetAsset";
import uploadAppianFile from "../data/appianFileUpload";

const App = () => {
  const [uploadUriDetails, setMyData] = useState(null);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchData = async () => {
      try {
        const response = await getAdobePresignedUploadURL();
        const responseObject = JSON.parse(response);
        setMyData(responseObject);

        console.log(responseObject);
      } catch (err) {
        console.log(err);
        setError(err);
      }
    };

    fetchData(); // Call the function to fetch the token
  }, []);

  const [formData, setFormData] = useState({
    firstName: "",
    lastName: "",
    dateOfBirth: "",
    emailAddress: "",
    phone: "",
    employmentType: "",
    housingStatus: "",
    address: {
      addressLine1: "",
      addressLine2: "",
      country: "",
      city: "",
      region: "",
      postCode: "",
    },
    addressFull: "",
    proofOfIncome: null,
    proofOfAddress: null,
    loanType: {
      id: "",
      name: "",
    },
    loanAmount: {
      currency: "GBP",
      amount: "",
    },
    // ...
  });

  const getFullAddress = () => {
    return `${formData.address.addressLine1}, ${formData.address.city}, ${formData.address.region}, ${formData.address.country}, ${formData.address.postCode}`;
  };

  useEffect(() => {
    const fullAddress = getFullAddress();
    setFormData({ ...formData, addressFull: fullAddress });
  }, [formData.address]); // Add formData.address as a dependency
  // Handle form changes (generic example)
  const handleChange = (event) => {
    setFormData({
      ...formData,
      [event.target.name]: event.target.value,
    });
  };

  const handleCurrencyChange = (currencyInput) => {
    setFormData({
      ...formData,
      loanAmount: currencyInput, // Update loanAmount directly
    });
  };

  const handlePhoneChange = (value) => {
    setFormData({ ...formData, phone: value });
  };

  const handleFileUpload = (file, fieldName) => {
    setFormData({ ...formData, [fieldName]: file });
    console.log(formData);
  };
  const fileExtensions = {
    accept: ".jpg, .jpeg, .png, .pdf",
  };

  const today = new Date();

  const eighteenYearsAgo = new Date();
  eighteenYearsAgo.setFullYear(today.getFullYear() - 18);

  const hundredYearsAgo = new Date();
  hundredYearsAgo.setFullYear(today.getFullYear() - 100);

  const formatDate = (date) => {
    return (
      date.getFullYear() +
      "-" +
      ("0" + (date.getMonth() + 1)).slice(-2) +
      "-" +
      ("0" + date.getDate()).slice(-2)
    );
  };

  const createCustomerData = (formData, today) => {
    return {
      CUSTOMER_ID: null, // Assuming this is generated by your backend
      FIRST_NAME: formData.firstName,
      LAST_NAME: formData.lastName,
      DATE_OF_BIRTH: formatDate(formData.dateOfBirth), // Make sure this is in the format expected by your backend
      ADDRESS: formData.addressFull,
      FK_EMPLOYMENT_TYPE_ID: parseInt(formData.employmentType, 10),
      FK_HOUSING_STATUS_ID: parseInt(formData.housingStatus, 10),
      EMAIL: formData.emailAddress,
      PHONE_NO: formData.phone,
      FK_CREATED_BY_USER_ID: 1, // Hardcoded for simplicity, you might get this dynamically
      CREATED_ON: formatDate(today), // Or format as needed by your backend
      FK_MODIFIED_BY_USER_ID: 1,
      MODIFIED_ON: formatDate(today),
      IS_ACTIVE: true,
    };
  };

  const createCaseData = (formData, today) => {
    const tomorrow = new Date(today);
    tomorrow.setDate(tomorrow.getDate() + 1); // Calculate tomorrow's date

    return {
      CASE_ID: null, // Assuming auto-generated by your backend
      CUSTOMER_ID: null,
      FK_CASE_STATUS_ID: 1, // Assuming '1' represents a new case
      FK_LOAN_TYPE_ID: parseInt(formData.loanType, 10), // Assuming loanType has an 'id' property
      LOAN_AMOUNT:
        formData.loanAmount.currency + " " + formData.loanAmount.amount,
      RENEWAL_FREQUENCY: "Daily",
      NEXT_RENEWAL_DATE: formatDate(tomorrow), // Using the formatDate helper
      FK_CREATED_BY_USER_ID: 1,
      CREATED_ON: formatDate(today),
      FK_MODIFIED_BY_USER_ID: 1,
      MODIFIED_ON: formatDate(today),
      IS_ACTIVE: true,
    };
  };

  const handleSubmit = async () => {
    const UploadURI = JSON.parse(uploadUriDetails).uploadUri;
    console.log(JSON.parse(uploadUriDetails).assetID);

    uploadAppianFile(formData.proofOfAddress);

    // 1. Upload Files
    // await Promise.all([
    //   putAdobeUpload(formData.proofOfIncome, "proofOfIncome"),
    //   putAdobeUpload(formData.proofOfAddress, "proofOfAddress")
    // ]);

    // // 2. Prepare Data
    // const today = new Date();

    const customerData = createCustomerData(formData, today);
    const caseData = createCaseData(formData, today);
    console.log(caseData);
    // const caseData = createCaseData(formData, today, customerData.CUSTOMER_ID); // Assuming CUSTOMER_ID is returned

    // // 3. API Calls (Placeholders - Implement your actual API call logic here)
    // try {
    //   const customerResponse = await fetch('/your-customer-api-endpoint', {
    //     method: 'POST',
    //     headers: { 'Content-Type': 'application/json' },
    //     body: JSON.stringify(customerData)
    //   });

    //   const caseResponse = await fetch('/your-case-api-endpoint', {
    //     method: 'POST',
    //     headers: { 'Content-Type': 'application/json' },
    //     body: JSON.stringify(caseData)
    //   });

    //   // Handle responses if needed
    // } catch (error) {
    //   console.error("Error submitting data:", error);
    // }
  };
  return (
    <>
      {" "}
      <div className="form-container">
        {/* Wrapper for layout */}
        <div className="form-column">
          {/* Column 1 */}
          <TextInput
            label="First Name"
            name="firstName"
            value={formData.firstName}
            onChange={handleChange}
          />
          <TextInput
            label="Last Name"
            name="lastName"
            value={formData.lastName}
            onChange={handleChange}
          />
          <DateInput
            label="Date of Birth"
            name="dateOfBirth"
            dateBefore={eighteenYearsAgo}
            dateAfter={hundredYearsAgo}
            date={formData.dateOfBirth}
            errorMessage="Invalid date selection"
            onChange={(date) => setFormData({ ...formData, dateOfBirth: date })}
          />
          <PhoneInputComponent
            name="phone"
            value={formData.phone}
            onChange={handlePhoneChange}
          />
          <EmailInput
            name="emailAddress"
            label="Email"
            value={formData.email}
            onChange={handleChange}
          />
          <div className="input-line">
            <DropdownInput
              label="Loan Type"
              name="loanType"
              value={formData.loanType || ""}
              options={loanTypeLookup}
              onChange={handleChange}
              idKey="loanTypeID"
              returnIdKey={true}
            />
          </div>
          <div className="input-line">
            <CurrencyInput
              name="loanAmount"
              label="Loan Amount"
              value={formData.loanAmount}
              onChange={handleCurrencyChange}
            />
          </div>
        </div>
        <div className="form-column">
          {/* Column 2 */}
          <AddressInput
            name="address"
            value={formData.address}
            onChange={(address) => setFormData({ ...formData, address })}
          />
          <div className="input-line">
            <DropdownInput
              label="Employment Type"
              name="employmentType"
              value={formData.employmentType || ""}
              options={employmentTypeLookup}
              onChange={handleChange}
              idKey="employmentTypeID"
              returnIdKey={true}
            />
            <DropdownInput
              label="Housing Status"
              name="housingStatus"
              value={formData.housingStatus || ""}
              options={housingStatusLookup}
              onChange={handleChange}
              idKey="housingStatusID"
              returnIdKey={true}
            />
          </div>
        </div>
      </div>
      <div>
        <hr></hr>
        <h2>Proof Of Address</h2>
        <FileUpload
          acceptedTypes={["image/jpeg", "image/png", "application/pdf"]}
          onUpload={handleFileUpload}
          errorMessage="Invalid file type. Please upload JPEG, PNG, or PDF files."
          fieldName="proofOfAddress"
          instructions={proofOfAddressInstructions}
        />
        <hr></hr>
        <h2>Proof Of Income</h2>
        <FileUpload
          acceptedTypes={["image/jpeg", "image/png", "application/pdf"]}
          onUpload={handleFileUpload}
          errorMessage="Invalid file type. Please upload JPEG, PNG, or PDF files."
          fieldName="proofOfIncome"
          instructions={proofOfIncomeInstructions}
        />
        <button type="submit" onClick={handleSubmit}>
          Submit
        </button>
      </div>
    </>
  );
};

export default App;
